{
  "openapi": "3.0.0",
  "info": {
    "title": "COVID Modeling",
    "description": "The COVID Modeling UI was developed to help policy makers explore hypothetical intervention strategies to reduce the impact of COVID-19. It provides a common interface and language to run simulations against multiple models at the same time. This API is intended to facilitate automation, e.g. running weekly simulations with the same parameters, and integration with other tools.",
    "version": "0.0.1",
    "license": {"name": "MIT License", "url": "https://mit-license.org/"}
  },
  "servers": [{"url": "/api"}],
  "security": [{"token": [], "session": []}],
  "tags": [
    {"name": "users", "description": "User management and authentication"},
    {
      "name": "simulations",
      "description": "Running groups of simulations and retrieving results"
    },
    {
      "name": "model-runs",
      "description": "Running individual simulations and retrieving results"
    }
  ],
  "paths": {
    "/simulations": {
      "get": {
        "description": "Retrieves list of simulations",
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json; charset=utf-8": {
                "schema": {
                  "type": "array",
                  "items": {"$ref": "#/components/schemas/SimulationSummary"}
                }
              }
            }
          }
        },
        "operationId": "getSimulations",
        "tags": ["simulations"]
      },
      "post": {
        "description": "Schedule new simulation",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {"$ref": "#/components/schemas/NewSimulationConfig"},
              "example": {
                "regionID": "US",
                "subregionID": "US-AK",
                "label": "Simulation",
                "customCalibrationDate": "2020-03-06",
                "interventionPeriods": [
                  {
                    "startDate": "2020-03-06",
                    "socialDistancing": "aggressive",
                    "schoolClosure": "aggressive",
                    "caseIsolation": "aggressive",
                    "voluntaryHomeQuarantine": "aggressive",
                    "reductionPopulationContact": 0
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json; charset=utf-8": {
                "schema": {
                  "type": "object",
                  "required": ["id"],
                  "properties": {"id": {"type": "integer"}}
                }
              }
            }
          },
          "422": {
            "description": "Invalid configuration",
            "content": {
              "application/json; charset=utf-8": {
                "schema": {
                  "type": "object",
                  "required": ["error"],
                  "properties": {"error": {"type": "string"}}
                }
              }
            }
          }
        },
        "operationId": "postSimulations",
        "tags": ["simulations"]
      }
    },
    "/user/token": {
      "post": {
        "description": "Generates API token for use in other API endpoints.\nPlease note that generating a new token will invalidate any existing tokens.\nYou should not share your token, and should keep your token safe and secure, e.g. using a password manager.\nYour token cannot be retrieved if it is lost, it must be regenerated.\nYour token will expire after 90 days.",
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json; charset=utf-8": {
                "schema": {
                  "type": "object",
                  "required": ["token"],
                  "properties": {"token": {"type": "string"}}
                }
              }
            }
          }
        },
        "operationId": "getUserToken",
        "tags": ["users"]
      }
    },
    "/simulations/{id}/case-summary": {
      "get": {
        "description": "Retrieves summary result of simulation",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "description": "Simulation ID",
            "schema": {"type": "integer"},
            "example": 1
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json; charset=utf-8": {
                "schema": {"$ref": "#/components/schemas/CaseSummary"}
              }
            }
          }
        },
        "operationId": "getSimulationCaseSummary",
        "tags": ["simulations"]
      }
    },
    "/simulations/{id}": {
      "get": {
        "description": "Retrieves simulation summary",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "description": "Simulation ID",
            "schema": {"type": "integer"},
            "example": 84
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json; charset=utf-8": {
                "schema": {"$ref": "#/components/schemas/Simulation"}
              }
            }
          }
        },
        "operationId": "getSimulation",
        "tags": ["simulations"]
      }
    },
    "/simulations/model-runs/{model}": {
      "post": {
        "description": "Schedule new model run",
        "parameters": [
          {
            "in": "path",
            "name": "model",
            "description": "Model slug",
            "schema": {
              "type": "string",
              "$ref": "#/components/schemas/ModelSlug"
            },
            "example": "mrc-ide-covid-sim"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {"$ref": "#/components/schemas/ModelInput"},
              "examples": {
                "custom": {
                  "summary": "Run simulation for a single model using a custom format",
                  "value": {
                    "p": [0.5, 0.25],
                    "u0": [0.99, 0.01, 0],
                    "tspan": [0, 10000]
                  }
                },
                "common": {
                  "summary": "Run simulation for a single model using the common format with complete control over parameters",
                  "value": {
                    "region": "US",
                    "subregion": "US-AK",
                    "parameters": {
                      "calibrationDate": "2020-03-06",
                      "calibrationCaseCount": 0,
                      "calibrationDeathCount": 0,
                      "r0": null,
                      "interventionPeriods": [
                        {
                          "startDate": "2020-03-06",
                          "socialDistancing": "aggressive",
                          "schoolClosure": "aggressive",
                          "caseIsolation": "aggressive",
                          "voluntaryHomeQuarantine": "aggressive",
                          "reductionPopulationContact": 0
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json; charset=utf-8": {
                "schema": {
                  "type": "object",
                  "required": ["id"],
                  "properties": {"id": {"type": "integer"}}
                }
              }
            }
          },
          "422": {
            "description": "Invalid configuration",
            "content": {
              "application/json; charset=utf-8": {
                "schema": {
                  "type": "object",
                  "required": ["error"],
                  "properties": {"error": {"type": "string"}}
                }
              }
            }
          }
        },
        "operationId": "postModelRun",
        "tags": ["model-runs"]
      }
    },
    "/simulations/{id}/model-runs/{model}/download": {
      "get": {
        "description": "Downloads full result of simulation",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "description": "Simulation ID",
            "schema": {"type": "integer"},
            "example": 2
          },
          {
            "in": "path",
            "name": "model",
            "description": "Model slug",
            "schema": {
              "type": "string",
              "$ref": "#/components/schemas/ModelSlug"
            }
          }
        ],
        "responses": {
          "307": {
            "description": "Successful redirect",
            "headers": {
              "Location": {
                "description": "The URL to download results from",
                "schema": {"type": "string"}
              }
            }
          }
        },
        "operationId": "getSimulationDownload",
        "tags": ["model-runs"]
      }
    },
    "/simulations/{id}/model-runs/{model}/export": {
      "get": {
        "description": "Downloads full result of simulation",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "description": "Simulation ID",
            "schema": {"type": "integer"},
            "example": 84
          },
          {
            "in": "query",
            "name": "model",
            "description": "Model slug",
            "schema": {
              "type": "string",
              "$ref": "#/components/schemas/ModelSlug"
            }
          },
          {
            "in": "query",
            "name": "format",
            "description": "Determines what data and media type to return:\n \n * results -> application/json\n * crystalcast -> text/csv",
            "default": "results",
            "schema": {
              "type": "string",
              "$ref": "#/components/schemas/ExportFormat"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful export",
            "content": {
              "application/json; charset=utf-8": {
                "schema": {"$ref": "#/components/schemas/ModelOutput"}
              },
              "text/csv": {
                "schema": {"type": "string"},
                "examples": {
                  "success": {"externalValue": "/export-example.csv"}
                }
              }
            }
          }
        },
        "operationId": "getSimulationExport",
        "tags": ["model-runs"]
      }
    },
    "/simulations/{id}/model-runs/{model}": {
      "get": {
        "description": "Retrieves model run summary",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "description": "Simulation ID",
            "schema": {"type": "integer"},
            "example": 84
          },
          {
            "in": "path",
            "name": "model",
            "description": "Model slug",
            "schema": {
              "type": "string",
              "$ref": "#/components/schemas/ModelSlug"
            },
            "example": "mrc-ide-covid-sim"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json; charset=utf-8": {
                "schema": {"$ref": "#/components/schemas/ModelRun"}
              }
            }
          }
        },
        "operationId": "getSimulation",
        "tags": ["model-runs"]
      }
    }
  },
  "components": {
    "schemas": {
      "CaseSummary": {
        "type": "object",
        "additionalProperties": {
          "type": "object",
          "properties": {
            "cConf": {"type": "number"},
            "cHosp": {"type": "number"},
            "cDeaths": {"type": "number"},
            "peakDeath": {"$ref": "#/components/schemas/ISODate"},
            "peakDailyDeath": {"type": "number"},
            "modelVersion": {"type": "string"}
          },
          "required": [
            "cConf",
            "cHosp",
            "cDeaths",
            "peakDeath",
            "peakDailyDeath"
          ],
          "additionalProperties": false
        }
      },
      "ExportFormat": {"type": "string", "enum": ["results", "crystalcast"]},
      "Intensity": {
        "type": "string",
        "enum": ["aggressive", "moderate", "mild"],
        "title": "Intensity"
      },
      "InterventionPeriod": {
        "type": "object",
        "properties": {
          "startDate": {
            "$ref": "#/components/schemas/ISODate",
            "description": "An ISO-8601 string encoding the date that these interventions begin."
          },
          "socialDistancing": {
            "$ref": "#/components/schemas/Intensity",
            "description": "The level of social distancing in the region."
          },
          "schoolClosure": {
            "$ref": "#/components/schemas/Intensity",
            "description": "The level of school closure in the region."
          },
          "caseIsolation": {
            "$ref": "#/components/schemas/Intensity",
            "description": "The level to which individuals with symptoms self-isolate."
          },
          "voluntaryHomeQuarantine": {
            "$ref": "#/components/schemas/Intensity",
            "description": "The level to which entire households self-isolate when one member of the household has symptoms."
          },
          "reductionPopulationContact": {
            "type": "number",
            "description": "The estimated reduction in population contact resulting from all of the above interventions.\nSome models require this generalized parameter instead of the individual interventions."
          }
        },
        "required": ["startDate", "reductionPopulationContact"],
        "additionalProperties": false,
        "description": "Each intervention period is specified by a `startDate`, a set of interventions (`socialDistancing`, `caseIsolation`, `voluntaryHomeQuarantine`, and `schoolClosure`), and an estimate of the overall effect of these interventions (`reductionPopulationContact`).\nThis overall estimate is needed because some models do not simulate the effects of individual interventions.\nThe strictness of each intervention is specified roughly, as one of `mild`, `moderate`, or `aggressive`.\nEach model connector is responsible for interpreting this distinction in a way that works for the particular model.",
        "title": "Intervention Period"
      },
      "ISODate": {
        "type": "string",
        "title": "ISO Date",
        "example": "2020-03-06"
      },
      "ModelDescription": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "A short display name to identify the model"
          },
          "modelVersion": {
            "type": "string",
            "description": "A version number identifying the version of the model used in this run."
          },
          "connectorVersion": {
            "type": "string",
            "description": "A version number identifying the version of the connector used in this run.\nThis may be the same as modelVersion if development of the two is closely-linked."
          }
        },
        "required": ["name", "modelVersion", "connectorVersion"],
        "additionalProperties": false,
        "title": "Model Description"
      },
      "CommonModelInput": {
        "type": "object",
        "properties": {
          "region": {
            "$ref": "#/components/schemas/Region",
            "description": "The desired geographical top-level region for the simulation.\nConnector must check this value (and subregion, if provided) and and either produce results for that geography, or return an error."
          },
          "subregion": {
            "$ref": "#/components/schemas/Subregion",
            "description": "Specific subregion for the simulation.\nMay be omitted"
          },
          "parameters": {
            "$ref": "#/components/schemas/ModelParameters",
            "description": "Desired parameters.\nConnectors may choose to ignore any of these parameters if they wish."
          }
        },
        "required": ["region", "parameters"],
        "additionalProperties": false,
        "description": "A generalized description of the input to an epidemiological model.",
        "title": "Common Model Input"
      },
      "MicroMoBBHRMInput": {
        "type": "object",
        "properties": {
          "p": {
            "type": "array",
            "items": {"type": "number"},
            "description": "Number of patches"
          },
          "tmax": {
            "type": "array",
            "items": {"type": "number"},
            "description": "Number of time steps"
          },
          "aqua_stochastic": {
            "type": "array",
            "items": {"type": "boolean"},
            "description": "Update the aquatic mosquito model stochastically or deterministically?"
          },
          "aqua_molt": {
            "type": "array",
            "items": {"type": "array", "items": {"type": "number"}},
            "description": "Proportion of immature stages which mature and emerge as adults each day\n(rows correspond to patches and columns to days)"
          },
          "aqua_surv": {
            "type": "array",
            "items": {"type": "array", "items": {"type": "number"}},
            "description": "Aquatic daily survival probability\n(rows correspond to patches and columns to days)"
          },
          "aqua_K": {
            "type": "array",
            "items": {"type": "array", "items": {"type": "number"}},
            "description": "Carrying capacity\n(rows correspond to patches and columns to days)"
          },
          "aqua_L": {
            "type": "array",
            "items": {"type": "number"},
            "description": "Initial number of immature mosquitoes (length should equal number of\npatches)"
          },
          "adult_stochastic": {
            "type": "array",
            "items": {"type": "boolean"},
            "description": "Update the adult mosquito model stochastically or deterministically?"
          },
          "adult_f": {
            "type": "array",
            "items": {"type": "number"},
            "description": "Blood feeding rate"
          },
          "adult_q": {
            "type": "array",
            "items": {"type": "number"},
            "description": "Human blood feeding fraction"
          },
          "adult_eip": {
            "type": "array",
            "items": {"type": "number"},
            "description": "the extrinsic incubation period (can be either length 1, 365, or equal to\ntmax)"
          },
          "adult_p": {
            "type": "array",
            "items": {"type": "array", "items": {"type": "number"}},
            "description": "Adult daily survival probability\n(rows correspond to patches and columns to days)"
          },
          "adult_psi": {
            "type": "array",
            "items": {"type": "array", "items": {"type": "number"}},
            "description": "mosquito dispersal matrix (rows must sum to 1)"
          },
          "adult_nu": {
            "type": "array",
            "items": {"type": "number"},
            "description": "number of eggs laid per oviposition"
          },
          "adult_M": {
            "type": "array",
            "items": {"type": "number"},
            "description": "total mosquito density per patch (length should equal number of patches)"
          },
          "adult_Y": {
            "type": "array",
            "items": {"type": "number"},
            "description": "infected mosquito density per patch (length should equal number of patches)"
          },
          "adult_Z": {
            "type": "array",
            "items": {"type": "number"},
            "description": "infectious mosquito density per patch (length should equal number of patches)"
          }
        },
        "required": [
          "p",
          "tmax",
          "aqua_stochastic",
          "aqua_molt",
          "aqua_surv",
          "aqua_K",
          "aqua_L",
          "adult_stochastic",
          "adult_f",
          "adult_q",
          "adult_eip",
          "adult_p",
          "adult_psi",
          "adult_nu",
          "adult_M",
          "adult_Y",
          "adult_Z"
        ],
        "additionalProperties": false,
        "title": "Input for MicroMoB model with Beverton-Holt aquatic mosquito model and\nRoss-Macdonald adult mosquito model."
      },
      "MinimalModelInput": {
        "type": "object",
        "properties": {
          "p": {
            "type": "array",
            "items": {"type": "number"},
            "description": "Vector of model parameters"
          },
          "u0": {
            "type": "array",
            "items": {"type": "number"},
            "description": "Vector of initial conditions"
          },
          "tspan": {
            "type": "array",
            "items": {"type": "number"},
            "description": "Timespan over which to simulate the model"
          },
          "dt": {
            "type": "number",
            "description": "Optional time interval at which to compute the states."
          }
        },
        "required": ["p", "u0", "tspan"],
        "additionalProperties": false,
        "title": "Minimal Model Input"
      },
      "ModelInput": {
        "anyOf": [
          {"$ref": "#/components/schemas/CommonModelInput"},
          {"$ref": "#/components/schemas/MinimalModelInput"},
          {"$ref": "#/components/schemas/MicroMoBBHRMInput"}
        ],
        "title": "Model Input"
      },
      "CommonModelOutput": {
        "type": "object",
        "properties": {
          "metadata": {"$ref": "#/components/schemas/CommonModelInput"},
          "model": {"$ref": "#/components/schemas/ModelDescription"},
          "time": {
            "type": "object",
            "properties": {
              "t0": {
                "type": "string",
                "description": "An ISO-8601 string encoding the date that each timeseries begins."
              },
              "timestamps": {
                "type": "array",
                "items": {"type": "number"},
                "description": "The timestamps that correspond to every series of metrics.\nEach value is a number of days after `t0`."
              },
              "extent": {
                "type": "array",
                "minItems": 2,
                "items": [{"type": "number"}, {"type": "number"}],
                "maxItems": 2,
                "description": "The minimum and maximum timestamps for the series of reported metrics.\nEach value is a number of days after `t0`."
              }
            },
            "required": ["t0", "timestamps", "extent"],
            "additionalProperties": false
          },
          "aggregate": {
            "type": "object",
            "properties": {
              "metrics": {"$ref": "#/components/schemas/SeverityMetrics"}
            },
            "required": ["metrics"],
            "additionalProperties": false
          }
        },
        "required": ["metadata", "model", "time", "aggregate"],
        "additionalProperties": false,
        "title": "Common Model Output"
      },
      "MicroMoBBHRMOutput": {
        "type": "object",
        "properties": {
          "metadata": {"$ref": "#/components/schemas/MicroMoBBHRMInput"},
          "t": {
            "type": "array",
            "items": {"type": "number"},
            "description": "Vector of times at which the model is run"
          },
          "MYZ": {
            "type": "array",
            "items": {
              "type": "array",
              "items": {"type": "array", "items": {"type": "number"}}
            },
            "description": "Array (patches, days, MYZ)"
          }
        },
        "required": ["metadata", "t", "MYZ"],
        "additionalProperties": false,
        "title": "Output for MicroMoB model with Beverton-Holt aquatic mosquito model and\nRoss-Macdonald adult mosquito model."
      },
      "MinimalModelOutput": {
        "type": "object",
        "properties": {
          "metadata": {"$ref": "#/components/schemas/MinimalModelInput"},
          "model": {"$ref": "#/components/schemas/ModelDescription"},
          "t": {
            "type": "array",
            "items": {"type": "number"},
            "description": "Vector of times at which the model is run"
          },
          "u": {
            "type": "array",
            "items": {"type": "array", "items": {"type": "number"}},
            "description": "Matrix of states"
          },
          "outputs": {
            "type": "array",
            "items": {"type": "number"},
            "description": "Optional vector of outputs"
          }
        },
        "required": ["metadata", "model", "t", "u"],
        "additionalProperties": false,
        "title": "Minimal Model Output"
      },
      "ModelOutput": {
        "anyOf": [
          {"$ref": "#/components/schemas/CommonModelOutput"},
          {"$ref": "#/components/schemas/MinimalModelOutput"},
          {"$ref": "#/components/schemas/MicroMoBBHRMOutput"}
        ],
        "title": "Model Output"
      },
      "ModelParameters": {
        "type": "object",
        "properties": {
          "calibrationDate": {
            "$ref": "#/components/schemas/ISODate",
            "description": "An ISO-8601 string encoding the date of the most recent case data in the region.\nSome models such as `CovidSim` require you to provide some information about recorded cases in the region, in order to calibrate the model.\nThe web-interface provides this information automatically, based on recorded case data downloaded daily from various international data sources."
          },
          "calibrationCaseCount": {
            "type": "number",
            "description": "The total number of confirmed cases in the region before the calibration date."
          },
          "calibrationDeathCount": {
            "type": "number",
            "description": "The total number of deaths in the region before the calibration date."
          },
          "r0": {
            "type": "number",
            "description": "The assumed [_reproduction number_](https://en.wikipedia.org/wiki/Basic_reproduction_number) for the virus.\nIf this is null, then each model will use its own default value.",
            "nullable": true
          },
          "interventionPeriods": {
            "type": "array",
            "items": {"$ref": "#/components/schemas/InterventionPeriod"},
            "description": "A list of time periods, each with a different set of interventions.\nPolicy interventions are specified as a series of _intervention periods_, each with a certain set of interventions that are in place.\nFor example, case isolation and social distancing may be instituted first, followed by school closure a week later, followed by a relaxation of all guidelines after several months.\n**Note** - In order to specify that _all_ interventions end on a certain date, there should be a _final_ intervention period that starts on that date, has no interventions specified, and has `reductionPopulationContact` set to zero."
          }
        },
        "required": [
          "calibrationDate",
          "calibrationCaseCount",
          "calibrationDeathCount",
          "r0",
          "interventionPeriods"
        ],
        "additionalProperties": false,
        "title": "Model Parameters"
      },
      "ModelRun": {
        "type": "object",
        "properties": {
          "model_slug": {"$ref": "#/components/schemas/ModelSlug"},
          "status": {"$ref": "#/components/schemas/RunStatus"},
          "results_data": {"type": "string", "nullable": true},
          "export_location": {"type": "string", "nullable": true}
        },
        "required": ["model_slug", "status", "results_data", "export_location"],
        "additionalProperties": false
      },
      "ModelSlug": {"type": "string"},
      "NewModelRunConfig": {
        "type": "object",
        "properties": {
          "model_slug": {
            "$ref": "#/components/schemas/ModelSlug",
            "example": "mrc-ide-covid-sim"
          },
          "config": {"$ref": "#/components/schemas/ModelInput"}
        },
        "required": ["model_slug", "config"],
        "additionalProperties": false
      },
      "NewSimulationConfig": {
        "type": "object",
        "properties": {
          "regionID": {"$ref": "#/components/schemas/Region"},
          "subregionID": {"$ref": "#/components/schemas/Subregion"},
          "label": {"type": "string"},
          "r0": {"type": "number", "example": 1},
          "customCalibrationDate": {"$ref": "#/components/schemas/ISODate"},
          "interventionPeriods": {
            "type": "array",
            "items": {"$ref": "#/components/schemas/InterventionPeriod"}
          }
        },
        "required": ["regionID", "label", "interventionPeriods"],
        "additionalProperties": false,
        "description": "The data sent from web UI to backend"
      },
      "Region": {"type": "string", "title": "Region", "example": "US"},
      "RunStatus": {
        "type": "string",
        "enum": ["pending", "in-progress", "complete", "unsupported", "failed"],
        "title": "Run Status"
      },
      "SeverityMetrics": {
        "type": "object",
        "properties": {
          "Mild": {
            "type": "array",
            "items": {"type": "number"},
            "description": "Current number of mild cases on this day"
          },
          "ILI": {
            "type": "array",
            "items": {"type": "number"},
            "description": "Current number of influenza-like illness cases on this day (assume represents GP demand)"
          },
          "SARI": {
            "type": "array",
            "items": {"type": "number"},
            "description": "Current number of Severe Acute Respiratory Illness cases on this day (assume represents hospital demand)"
          },
          "Critical": {
            "type": "array",
            "items": {"type": "number"},
            "description": "Current number of critical cases on this day (assume represents ICU demand)"
          },
          "CritRecov": {
            "type": "array",
            "items": {"type": "number"},
            "description": "Current number of critical cases on this day who are well enough to leave the ICU but still need a hospital bed"
          },
          "incDeath": {
            "type": "array",
            "items": {"type": "number"},
            "description": "Number of deaths occurring on this day"
          },
          "cumMild": {
            "type": "array",
            "items": {"type": "number"},
            "description": "Total number of mild cases since the beginning of the epidemic"
          },
          "cumILI": {
            "type": "array",
            "items": {"type": "number"},
            "description": "Total number of influenza-like illnesses since the beginning of the epidemic"
          },
          "cumSARI": {
            "type": "array",
            "items": {"type": "number"},
            "description": "Total number of severe acute respiratory illnesses since the beginning of the epidemic"
          },
          "cumCritical": {
            "type": "array",
            "items": {"type": "number"},
            "description": "Total number of critical cases since the beginning of the epidemic"
          },
          "cumCritRecov": {
            "type": "array",
            "items": {"type": "number"},
            "description": "Total number of patients recovered from critical cases since the beginning of the epidemic"
          },
          "R": {
            "type": "array",
            "items": {"type": "number"},
            "description": "R-number on this day"
          }
        },
        "required": [
          "Mild",
          "ILI",
          "SARI",
          "Critical",
          "CritRecov",
          "incDeath",
          "cumMild",
          "cumILI",
          "cumSARI",
          "cumCritical",
          "cumCritRecov"
        ],
        "additionalProperties": false,
        "description": "The output contains a number of time series which represent predicted metrics about the epidemic.\nThree kinds of metrics are reported:\n- **Current values** - These metrics (e.g. `Mild`, `Critical`) represent the current number of patients in a given condition, on a particular date. For example, the `Critical` value at a given timestamp represents the number of patients in critical condition on that day.\n- **Cumulative values** - These metrics (e.g. `cumMild`, `cumCritical`) represent the total number of people who have been afflicted with a given condition since the beginning of the epidemic. For example, the `cumCritical` value at a given timestamp represents the total number of people who had been in critical condition due to the virus any time leading up to that day.\n- **Incidence values** - The `incDeath` metric represents the number of patients who died of the virus on a given day.\nEach output is an array corresponding to the `extent` specified above (i.e. with the same length as `timestamps`).\nOther than for `R` all numbers must be integers.\nNot all output parameters may be appropriate for your model.\nAll keys (except `R`) in the `aggregate` object are required however.\nIf a particular metric is not supported an array of zeros can be given.\nFor `R`, if your model does not produce this, you can simply omit the key.",
        "title": "Severity Metrics"
      },
      "Simulation": {
        "type": "object",
        "properties": {
          "id": {"type": "number"},
          "region_name": {"type": "string"},
          "status": {"$ref": "#/components/schemas/RunStatus"},
          "subregion_name": {"type": "string"},
          "region_id": {"type": "string"},
          "subregion_id": {"type": "string"},
          "github_user_id": {"type": "number"},
          "github_user_login": {"type": "string"},
          "configuration": {"$ref": "#/components/schemas/ModelInput"},
          "model_runs": {
            "type": "array",
            "items": {"$ref": "#/components/schemas/ModelRun"}
          },
          "label": {"type": "string"},
          "created_at": {"type": "string"},
          "updated_at": {"type": "string"}
        },
        "required": [
          "id",
          "region_name",
          "status",
          "github_user_id",
          "github_user_login",
          "configuration",
          "model_runs",
          "created_at",
          "updated_at"
        ],
        "additionalProperties": false
      },
      "SimulationSummary": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "configurationSummary": {"type": "string"},
          "id": {"type": "number"},
          "region_name": {"type": "string"},
          "status": {"$ref": "#/components/schemas/RunStatus"},
          "subregion_name": {"type": "string"},
          "region_id": {"type": "string"},
          "subregion_id": {"type": "string"},
          "github_user_id": {"type": "number"},
          "github_user_login": {"type": "string"},
          "model_runs": {
            "type": "array",
            "items": {"$ref": "#/components/schemas/ModelRun"}
          },
          "label": {"type": "string"},
          "created_at": {"type": "string"},
          "updated_at": {"type": "string"}
        },
        "required": [
          "configurationSummary",
          "created_at",
          "github_user_id",
          "github_user_login",
          "id",
          "model_runs",
          "region_name",
          "status",
          "updated_at"
        ]
      },
      "Subregion": {"type": "string", "title": "Subregion", "example": "US-AK"}
    },
    "securitySchemes": {
      "token": {
        "type": "http",
        "in": "header",
        "name": "Authorization",
        "scheme": "bearer",
        "bearerFormat": "JWT",
        "description": "Primary authentication method for programmatic use."
      },
      "session": {
        "type": "http",
        "in": "cookie",
        "name": "session",
        "description": "For use in UI. Also requires valid session.sig cookie"
      }
    }
  }
}
